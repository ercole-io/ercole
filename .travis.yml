version: ~> 1.0

dist: xenial

language: go

sudo: required

branches:
  except:
    - /^latest$/

go:
  - 1.13.x

env:
  global:
    - MONGODB_URI=mongodb://127.0.0.1:27017
    - VERSION=latest
    - PACKAGE_BUILD_IMAGE=sorintdev/rpmbuild-centos7
    - WORKSPACE='/project'

services:
  - mongodb
  
before_install:
  - if [ -z ${TRAVIS_TAG} ] || [ ${TRAVIS_TAG} == *-* ]; then export VERSION=latest; else export VERSION=${TRAVIS_TAG}; fi
  - echo ${TRAVIS_TAG}
  - echo ${VERSION}
  - sudo docker pull ${PACKAGE_BUILD_IMAGE}

install:
  - mkdir -p dist
  - go get -v
  - go get github.com/golang/mock/mockgen@latest
  - sudo docker run -d --rm -it -e WORKSPACE="${WORKSPACE}" -e TRAVIS_REPO_SLUG="${TRAVIS_REPO_SLUG}" -e TRAVIS_BUILD_NUMBER="${TRAVIS_BUILD_NUMBER}" -v $PWD:"${WORKSPACE}" --name package_builder ${PACKAGE_BUILD_IMAGE} /bin/cat

script: 
  - go generate -v ./...
  - go build -o ercole
  - go test -v ./...
  - ./ercole version
  - docker exec -it package_builder /bin/sh -c "mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}"
  - docker exec -it package_builder /bin/sh -c "ln -s ${WORKSPACE} ~/rpmbuild/SOURCES/ercole-${VERSION}"
  - docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && rpmbuild --define \"_version ${VERSION}\" -bb package/rhel7/ercole.spec"
  - docker exec -it package_builder /bin/sh -c "ls ~/rpmbuild/RPMS/x86_64/ercole-*.rpm"
  - docker exec -it package_builder /bin/sh -c "file ~/rpmbuild/RPMS/x86_64/ercole-*.rpm"
  - docker exec -it package_builder /bin/sh -c "cp ~/rpmbuild/RPMS/x86_64/ercole-*.rpm ${WORKSPACE}/dist"
  - go test -race -coverprofile=coverage.txt -covermode=atomic -v ./...

before_deploy:
  - if [[ ${VERSION} == "latest" ]]; then git tag -f latest; fi
  - if [[ ${VERSION} == "latest" ]]; then git remote add gh https://amreo:${GITHUB_API_RELEASE}@github.com/${TRAVIS_REPO_SLUG}.git; fi
  - if [[ ${VERSION} == "latest" ]]; then git push gh latest || true; fi
  - if [[ ${VERSION} == "latest" ]]; then git push -f gh latest; fi
  - if [[ ${VERSION} == "latest" ]]; then git remote remove gh; fi

after_success:
  - bash <(curl -s https://codecov.io/bash)

deploy:
  - provider: script
    # script: cd dist/ && echo $MAGIC_SCRIPT | base64 -d | bash > /dev/stdout 2>/dev/stdout
    script: ls && cd dist && for f in *; do echo $f; done
    skip_cleanup: true
    file_glob: true
    file: dist/*
  - provider: release
    api_key: $GITHUB_API_RELEASE
    file_glob: true
    file: dist/*
    skip_cleanup: true
    overwrite: true
    on:
      all_branches: true  